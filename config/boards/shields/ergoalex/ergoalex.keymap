#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "combos.dtsi"


#define XXX &none
#define ___ &trans

#define DEF 0
#define NAV 1
#define SPL 2
#define SPR 3
#define SYS 4
#define CODE 5
#define OSNAV 6
#define GAME 7

#define TAP 280 
#define IDLE 200

/ { 
    macros {
        clh: combo_layer_hybrid {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_param_1to1>
                , <&macro_press &mo MACRO_PLACEHOLDER>
                , <&macro_param_2to1>
                , <&macro_tap &kp MACRO_PLACEHOLDER>
                , <&macro_pause_for_release>
                , <&macro_param_1to1>
                , <&macro_release &mo MACRO_PLACEHOLDER>
                ;
        };

        alt_tab: alt_tab_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_press &mo OSNAV &kp LALT>
                , <&macro_tap &kp N1>
                , <&macro_pause_for_release>
                , <&macro_release &mo OSNAV &kp LALT>
                ;
        };

        ia: ignore_alt_macro {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings
                = <&macro_release &kp LALT>
                , <&macro_param_1to1>
                , <&macro_tap &kp MACRO_PLACEHOLDER>
                ;
        };
        
        fold: fold_unfold_vscode {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LG(K)>
                , <&macro_tap &kp LG(L)>
                ;
        };

    };
    
    behaviors {    
        hr: home_row_mod_right_timeless {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAP>;
            require-prior-idle-ms = <IDLE>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 40>; 
        }; 

        hl: home_row_mod_left_timeless {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAP>;
            require-prior-idle-ms = <IDLE>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 35 36 37 38 39>; 
        };

        colon: colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sft: shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            bindings = <&kp>, <&kp>; 
        };

        sys: system {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            bindings = <&mo>, <&kp>;
        };

        sc_at: shortcat_alttab_holdtap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAP>;
            bindings = <&alt_tab>, <&kp>;
            display-name = "shortcat-alttab-holdtap";
            hold-while-undecided;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp N1        &kp N2        &kp N3      &kp N4      &kp N5                   &kp N6               &kp N7      &kp N8      &kp N9       &kp N0
                &colon        &kp COMMA     &kp DOT     &kp P       &kp Y                    &kp F                &kp G       &kp C       &kp R        &kp L
                &sft LSHFT A  &hl LMETA O   &hl LCTRL E &hl LALT U  &kp I                    &kp D                &hr RALT H  &hr RCTRL T &hr RMETA N  &sft RSHFT S
                &kp SQT       &kp Q         &kp J       &kp K       &kp X                    &kp B                &kp M       &kp W       &kp V        &kp Z
                                            &kp SPACE   &mo CODE    &sys SYS LG(LS(N4))      &sys SYS LG(LS(N5))  &sc_at 0 LS(LG(SPACE))  &mo NAV
            >;
        };
        // &sc_at 0 LS(LG(SPACE)) #shortcat + alt-tab
   
        nav_layer {
            bindings = <
            ___        ___        ___        ___        ___                ___           ___            ___         ___            ___
            &kp ESC    &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LG(FSLH)       &kp PG_UP     &kp LA(LEFT)   &kp UP      &kp LA(RIGHT)  &fold
            &kp LSHFT  XXX        &kp BSPC   &kp RET    &kp LCTRL          &kp LG(LEFT)  &kp LEFT       &kp DOWN    &kp RIGHT      &kp LG(RIGHT)
            XXX        XXX        XXX        &kp TAB    ___                &kp PG_DN     &kp LA(LS(F))  &kp LC(N2)  &kp LG(F2)     ___ 
                                  ___        ___        ___                ___           ___            ___
            >;
        };

        spl_layer {
            bindings = <
                ___       ___       ___       ___       ___           ___  ___  ___  ___  ___
                &kp EXCL  &kp RBRC  &kp RBKT  &kp RPAR  &kp PRCNT     ___  ___  ___  ___  ___
                &kp PLUS  &kp LBRC  &kp LBKT  &kp LPAR  &kp EQUAL     ___  ___  ___  ___  ___
                &kp STAR  &kp HASH  &kp BSLH  &kp FSLH  &kp AT        ___  ___  ___  ___  ___
                                    ___       ___       ___           ___  ___  ___
            >;
        };

        spr_layer {
            bindings = <
                ___  ___  ___  ___  ___     ___        ___       ___        ___        ___
                ___  ___  ___  ___  ___     &kp PIPE   &kp AMPS  &kp UNDER  &kp LT     &kp GT
                ___  ___  ___  ___  ___     &kp EQUAL  ___       ___        &kp QMARK  &kp MINUS
                ___  ___  ___  ___  ___     ___        &kp DLLR  &kp TILDE  &kp CARET  &kp GRAVE
                          ___  ___  ___     ___        ___       ___
            >;
        };

        sys_layer {
            bindings = <
                ___           ___           ___           ___           ___               ___          ___  ___  ___  ___
                &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      ___          ___  ___  ___  ___
                XXX           XXX           XXX           XXX           &sys_reset        &sys_reset   ___  ___  ___  ___
                &bt BT_CLR    XXX           XXX           XXX           &bootloader       &bootloader  ___  ___  ___  ___
                                            ___           XXX           XXX               ___          ___  ___
            >;
        };

        vscode_layer {
            bindings = <
                ___        ___        ___        ___        ___                     ___  ___               ___     ___     ___
                ___        &kp LG(B)  &kp LG(J)  &kp LC(LS(N4))  &kp LG(LS(P))      ___  &kp LG(LA(LEFT))  &kp F3  &kp LG(LA(RIGHT))  ___
                &kp LSHFT  &kp LALT   &kp F12    &kp LG(P)  ___                     ___  &kp F1            &kp F4  &kp F2  ___
                ___        ___        ___        ___        ___                     ___  ___               ___     ___     ___
                                      ___        ___        ___                     ___  ___               ___
            >;
        };

        os_nav_layer {
            bindings = <
                ___         ___           ___           ___       ___            ___  ___               ___       ___                ___
                &ia C_PREV  &ia C_VOL_DN  &ia C_VOL_UP  &ia C_PP  &ia C_NEXT     ___  ___               &kp UP    ___                ___
                ___         ___           ___           ___       ___            ___  &kp LEFT          &kp DOWN  &kp RIGHT          ___
                ___         ___           ___           ___       ___            ___  ___               ___       ___                ___
                                          ___           ___       ___            ___  ___               ___
            >;
        };

        gaming_layer {
            bindings = <
                &kp N1      &kp N2     &kp N3     &kp N4    &kp N5    &kp N6  &kp N7  &kp N8     &kp N9  &kp N0
                &colon      &kp COMMA  &kp DOT    &kp P     &kp Y     &kp F   &kp G   &kp C      &kp R   &kp L
                &kp A       &kp O      &kp E      &kp U     &kp I     &kp D   &kp H   &kp T      &kp N   &kp S
                &kp SQT     &kp Q      &kp J      &kp K     &kp X     &kp B   &kp M   &kp W      &kp V   &kp Z
                                       &kp SPACE  &kp BSPC  XXX       XXX     XXX  &kp SPACE
            >;
        };


        blank_layer {
            bindings = <
                ___  ___  ___  ___  ___     ___  ___  ___  ___  ___
                ___  ___  ___  ___  ___     ___  ___  ___  ___  ___
                ___  ___  ___  ___  ___     ___  ___  ___  ___  ___
                ___  ___  ___  ___  ___     ___  ___  ___  ___  ___
                          ___  ___  ___     ___  ___  ___
            >;
        };

        // qwerty_layer {
        //     bindings = <
        //         &kp N1        &kp N2  &kp N3     &kp N4     &kp N5                   &kp N6   &kp N7  &kp N8     &kp N9   &kp N0
        //         &kp Q         &kp W   &kp E      &kp R      &kp T                    &kp Y    &kp U   &kp I      &kp O    &kp P
        //         &sft LSHFT A  &kp S   &kp D      &kp F      &kp G                    &kp H    &kp J   &kp K      &kp L    &sft RSHFT SEMI
        //         &kp Z         &kp X   &kp C      &kp V      &kp B                    &kp N    &kp M   &kp COMMA  &kp DOT  &kp FSLH
        //                               &kp SPACE  &mo CODE1  &sys SYS LG(LS(N4))      &mo SYS  &qwerty &mo NAV
        //     >;
        // };

    };
};



